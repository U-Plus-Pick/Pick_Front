import React, { useState, useEffect } from 'react'
import './Chatbot.scss'

const Chatbot = ({ initialMessage = null }) => {
  const [messages, setMessages] = useState([
    {
      id: 1,
      sender: 'bot',
      text: '안녕하세요! U+의 요금제 추천 AI, 유피예요. 무엇을 도와드릴까요?',
      timestamp: new Date(),
    },
  ])
  const [inputMessage, setInputMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [sidebarVisible, setSidebarVisible] = useState(true)

  useEffect(() => {
    if (initialMessage) {
      const newMessage = {
        id: Date.now(),
        sender: 'user',
        text: initialMessage,
        timestamp: new Date(),
      }
      setMessages(prev => [...prev, newMessage])
      sendToGPT(initialMessage)
    }
  }, [initialMessage])

  const sendToGPT = async message => {
    setIsLoading(true)
    try {
      // TODO: 백엔드 GPT API 호출
      // const response = await fetch('/api/chat', {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify({ message, conversation: messages }),
      // })
      // const data = await response.json()

      console.log('GPT에 전송할 메시지:', message)

      // 임시 응답 시뮬레이션
      setTimeout(() => {
        const botResponse = {
          id: Date.now() + 1,
          sender: 'bot',
          text: '네, 좋은 질문이네요! 고객님의 상황에 맞는 요금제를 추천드릴게요.',
          timestamp: new Date(),
        }
        setMessages(prev => [...prev, botResponse])
        setIsLoading(false)
      }, 1000)
    } catch (error) {
      console.error('GPT API 호출 에러:', error)
      const errorResponse = {
        id: Date.now() + 1,
        sender: 'bot',
        text: '죄송합니다. 일시적인 오류가 발생했습니다. 다시 시도해주세요.',
        timestamp: new Date(),
      }
      setMessages(prev => [...prev, errorResponse])
      setIsLoading(false)
    }
  }

  const sendMessage = () => {
    if (inputMessage.trim()) {
      const newMessage = {
        id: Date.now(),
        sender: 'user',
        text: inputMessage,
        timestamp: new Date(),
      }
      setMessages(prev => [...prev, newMessage])
      const messageToSend = inputMessage
      setInputMessage('')
      sendToGPT(messageToSend)
    }
  }

  const handleRecommendationClick = type => {
    const newMessage = {
      id: Date.now(),
      sender: 'user',
      text: `${type} 문의`,
      timestamp: new Date(),
    }
    setMessages(prev => [...prev, newMessage])
    sendToGPT(`${type}에 대해 알려주세요`)
  }

  const handleKeyPress = e => {
    if (e.key === 'Enter') {
      sendMessage()
    }
  }

  const resetChat = () => {
    setMessages([
      {
        id: 1,
        sender: 'bot',
        text: '안녕하세요! U+의 요금제 추천 AI, 유피예요. 무엇을 도와드릴까요?',
        timestamp: new Date(),
      },
    ])
    setInputMessage('')
    setIsLoading(false)
  }

  const toggleSidebar = () => {
    setSidebarVisible(!sidebarVisible)
  }

  return (
    <div className="chatbot-container">
      <div className="chatbot-window">
        <div className="chatbot-header">
          <div className="traffic-lights">
            <span className="light red"></span>
            <span className="light yellow"></span>
            <span className="light green"></span>
          </div>
        </div>

        <div className="chatbot-content">
          {sidebarVisible && (
            <div className="chatbot-sidebar">
              <div className="sidebar-header">
                <div className="settings-icon">
                  <img src="/user.png" alt="사용자" />
                </div>
                <span className="back-icon" onClick={toggleSidebar}>
                  ←
                </span>
              </div>
              <div className="sidebar-section">
                <button className="new-chat-btn" onClick={resetChat}>
                  <div className="sidebar-title">새 채팅</div>
                  <div className="sidebar-subtitle">무엇이든지 대화 내용이 저장됩니다</div>
                </button>
              </div>
            </div>
          )}

          <div className="chatbot-main">
            {!sidebarVisible && (
              <div className="sidebar-toggle-btn" onClick={toggleSidebar}>
                →
              </div>
            )}
            <div className="chat-header">
              <div className="chat-avatar">
                <img src="/penguin-character.png" alt="유피" />
              </div>
              <span className="chat-name">유피</span>
            </div>

            <div className="chat-messages">
              {messages.map(message => (
                <div key={message.id} className={`message ${message.sender}`}>
                  <div className="message-content">{message.text}</div>{' '}
                  {message.sender === 'bot' && <div className="message-time">방금 • AI 응답</div>}
                </div>
              ))}
              {isLoading && (
                <div className="message bot">
                  <div className="message-content typing">유피가 답변을 준비하고 있어요...</div>
                </div>
              )}
            </div>

            <div className="recommendation-options">
              <div className="recommendation-title">추천정보</div>
              <div className="recommendation-buttons">
                <button className="rec-btn" onClick={() => handleRecommendationClick('5G 요금제')}>
                  5G 요금 추천
                </button>
                <button className="rec-btn" onClick={() => handleRecommendationClick('결합할인')}>
                  결합 할인
                </button>
                <button className="rec-btn" onClick={() => handleRecommendationClick('멤버십혜택')}>
                  멤버십 혜택
                </button>
              </div>
            </div>

            <div className="chat-input-area">
              <input
                type="text"
                placeholder="무엇이 궁금하신가요?"
                value={inputMessage}
                onChange={e => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                className="chat-input"
                disabled={isLoading}
              />
              <button
                onClick={sendMessage}
                className="send-button"
                disabled={isLoading || !inputMessage.trim()}
              >
                보내기
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Chatbot
